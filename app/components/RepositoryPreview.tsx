'use client'

import React, { useState, useEffect, useCallback } from 'react'
import { Repository } from '../contexts/RepositoryContext'
import { GlobeAltIcon, LockClosedIcon, ClockIcon, UserIcon, CodeBracketIcon } from '@heroicons/react/24/outline'

interface RepositoryPreviewProps {
  repository: Repository
}

interface RepositoryDetails {
  readme?: string
  languages?: Record<string, number>
  topics?: string[]
  license?: string
  defaultBranch?: string
  size?: number
  starsCount?: number
  forksCount?: number
  openIssuesCount?: number
  lastCommit?: {
    message: string
    author: string
    date: string
  }
}

export function RepositoryPreview({ repository }: RepositoryPreviewProps) {
  const [details, setDetails] = useState<RepositoryDetails | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const loadRepositoryDetails = useCallback(async () => {
    try {
      setLoading(true)
      setError(null)
      
      // For now, we'll create a mock implementation
      // In a full implementation, you'd call GitHub API for additional details
      await new Promise(resolve => setTimeout(resolve, 1000)) // Simulate API call
      
      setDetails({
        readme: generateMockReadme(repository),
        languages: { 'TypeScript': 70, 'JavaScript': 20, 'CSS': 10 },
        topics: repository.isScaffoldedProject ? ['scaffolded', 'generated', 'web-app'] : ['library', 'utility'],
        license: 'MIT',
        defaultBranch: 'main',
        size: Math.floor(Math.random() * 5000) + 100,
        starsCount: Math.floor(Math.random() * 50),
        forksCount: Math.floor(Math.random() * 10),
        openIssuesCount: Math.floor(Math.random() * 5),
        lastCommit: {
          message: 'Initial commit',
          author: 'developer',
          date: repository.updatedAt
        }
      })
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load repository details')
    } finally {
      setLoading(false)
    }
  }, [repository])

  useEffect(() => {
    loadRepositoryDetails()
  }, [loadRepositoryDetails])

  const generateMockReadme = (repo: Repository): string => {
    return `# ${repo.name}

${repo.description || 'A project generated by the scaffolding system.'}

## Overview

This repository contains${repo.isScaffoldedProject ? ' a scaffolded project created using our AI-powered' : ' a'} development environment.

## Features

- Modern development setup
- TypeScript configuration
- Automated testing
- CI/CD pipeline

## Getting Started

\`\`\`bash
git clone ${repo.url}
cd ${repo.name}
npm install
npm run dev
\`\`\`

## Contributing

Please read our contributing guidelines before making any changes.

## License

This project is licensed under the MIT License.
`
  }

  const formatFileSize = (bytes: number): string => {
    if (bytes === 0) return '0 Bytes'
    const k = 1024
    const sizes = ['Bytes', 'KB', 'MB', 'GB']
    const i = Math.floor(Math.log(bytes) / Math.log(k))
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  if (loading) {
    return (
      <div className="min-h-[400px] flex items-center justify-center">
        <div className="text-center space-y-3">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500 mx-auto"></div>
          <p className="text-gray-600">Loading repository details...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="min-h-[400px] flex items-center justify-center">
        <div className="text-center space-y-3">
          <div className="w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto">
            <span className="text-xl">‚ùå</span>
          </div>
          <div>
            <p className="text-red-600 font-medium">Failed to load repository</p>
            <p className="text-red-500 text-sm">{error}</p>
          </div>
          <button
            onClick={loadRepositoryDetails}
            className="px-4 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
          >
            Retry
          </button>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6 max-h-[70vh] overflow-y-auto">
      {/* Repository Header */}
      <div className="border-b border-gray-200 pb-4">
        <div className="flex items-start justify-between">
          <div className="flex-1 min-w-0">
            <div className="flex items-center space-x-2 mb-2">
              <h3 className="text-xl font-semibold text-gray-900 truncate">
                {repository.name}
              </h3>
              {repository.private ? (
                <LockClosedIcon className="w-5 h-5 text-gray-400" />
              ) : (
                <GlobeAltIcon className="w-5 h-5 text-gray-400" />
              )}
              {repository.isScaffoldedProject && (
                <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                  Scaffolded
                </span>
              )}
            </div>
            
            {repository.description && (
              <p className="text-gray-600 mb-3">{repository.description}</p>
            )}

            <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500">
              <div className="flex items-center space-x-1">
                <ClockIcon className="w-4 h-4" />
                <span>Updated {formatDate(repository.updatedAt)}</span>
              </div>
              {details?.size && (
                <div className="flex items-center space-x-1">
                  <CodeBracketIcon className="w-4 h-4" />
                  <span>{formatFileSize(details.size * 1024)}</span>
                </div>
              )}
            </div>
          </div>

          <a
            href={repository.url}
            target="_blank"
            rel="noopener noreferrer"
            className="ml-4 px-4 py-2 bg-gray-900 text-white rounded-md hover:bg-gray-800 transition-colors text-sm font-medium"
          >
            View on GitHub
          </a>
        </div>
      </div>

      {/* Repository Stats */}
      {details && (
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4">
          <div className="text-center p-3 bg-gray-50 rounded-lg">
            <div className="text-lg font-semibold text-gray-900">{details.starsCount}</div>
            <div className="text-xs text-gray-500">Stars</div>
          </div>
          <div className="text-center p-3 bg-gray-50 rounded-lg">
            <div className="text-lg font-semibold text-gray-900">{details.forksCount}</div>
            <div className="text-xs text-gray-500">Forks</div>
          </div>
          <div className="text-center p-3 bg-gray-50 rounded-lg">
            <div className="text-lg font-semibold text-gray-900">{details.openIssuesCount}</div>
            <div className="text-xs text-gray-500">Issues</div>
          </div>
          <div className="text-center p-3 bg-gray-50 rounded-lg">
            <div className="text-lg font-semibold text-gray-900">{details.defaultBranch}</div>
            <div className="text-xs text-gray-500">Branch</div>
          </div>
        </div>
      )}

      {/* Languages */}
      {details?.languages && (
        <div>
          <h4 className="font-medium text-gray-900 mb-2">Languages</h4>
          <div className="space-y-2">
            {Object.entries(details.languages).map(([language, percentage]) => (
              <div key={language} className="flex items-center justify-between">
                <span className="text-sm text-gray-600">{language}</span>
                <div className="flex items-center space-x-2">
                  <div className="w-20 bg-gray-200 rounded-full h-2">
                    <div
                      className="bg-blue-500 h-2 rounded-full"
                      style={{ width: `${percentage}%` }}
                    />
                  </div>
                  <span className="text-xs text-gray-500">{percentage}%</span>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Topics */}
      {details?.topics && details.topics.length > 0 && (
        <div>
          <h4 className="font-medium text-gray-900 mb-2">Topics</h4>
          <div className="flex flex-wrap gap-2">
            {details.topics.map((topic) => (
              <span
                key={topic}
                className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
              >
                {topic}
              </span>
            ))}
          </div>
        </div>
      )}

      {/* README Preview */}
      {details?.readme && (
        <div>
          <h4 className="font-medium text-gray-900 mb-2">README.md</h4>
          <div className="bg-gray-50 rounded-lg p-4 text-sm">
            <pre className="whitespace-pre-wrap font-mono text-gray-700 leading-relaxed">
              {details.readme}
            </pre>
          </div>
        </div>
      )}

      {/* Last Commit */}
      {details?.lastCommit && (
        <div>
          <h4 className="font-medium text-gray-900 mb-2">Latest Commit</h4>
          <div className="bg-gray-50 rounded-lg p-3">
            <div className="flex items-start space-x-3">
              <div className="flex-shrink-0">
                <UserIcon className="w-5 h-5 text-gray-400" />
              </div>
              <div className="flex-1 min-w-0">
                <p className="text-sm font-medium text-gray-900">
                  {details.lastCommit.message}
                </p>
                <p className="text-xs text-gray-500">
                  by {details.lastCommit.author} on {formatDate(details.lastCommit.date)}
                </p>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
